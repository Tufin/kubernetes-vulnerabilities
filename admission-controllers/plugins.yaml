Plugins:
-  Plugin: AlwaysAdmit
   Description: >
     This admission controller allows all pods into the cluster.
     It is deprecated because its behavior is the same as if there were no admission controller at all.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwaysadmit
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: CIS benchmark 1.2.11
   FeatureState: 
     State:   Deprecated
     Version: "1.13"
-  Plugin: AlwaysPullImages
   Description: >
     This admission controller modifies every new Pod to force the image pull policy to Always.
     This is useful in a multitenant cluster so that users can be assured that their private images can only be used by those who have the credentials to pull them.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.12
   - Platform: gke
     Enable: False
     Reason: >
       GKE does not enable the Always Pull Images admission controller, as this overrides the ImagePullStrategy field.
       Always Pulling images may also limit the ability to scale, as compared to preloaded images.	      
-  Plugin: AlwaysDeny
   Description: "Rejects all requests. AlwaysDeny is DEPRECATED as no real meaning."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwaysdeny
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: Deprecated since Kubernetes 1.13
   FeatureState: 
     State:   Deprecated
     Version: "1.13"
-  Plugin: DefaultStorageClass
   Description: >
     This admission controller observes creation of PersistentVolumeClaim objects that do not request any specific storage class and automatically adds a default storage class to them.
     This way, users that do not request any special storage class do not need to care about them at all and they will get the default one.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#defaultstorageclass
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: DefaultTolerationSeconds
   Description: >
     This admission controller sets the default forgiveness toleration for pods to tolerate the taints notready:NoExecute and unreachable:NoExecute for 5 minutes, if the pods don’t already have toleration for taints node.kubernetes.io/not-ready:NoExecute or node.alpha.kubernetes.io/unreachable:NoExecute.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#defaulttolerationseconds
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for version 1.10
-  Plugin: DenyExecOnPrivileged
   Description: >
     This admission controller will intercept all requests to exec a command in a pod if that pod has a privileged container.
     This functionality has been merged into DenyEscalatingExec.
     The DenyExecOnPrivileged admission plugin is deprecated and will be removed in v1.18.
     Use of a policy-based admission plugin (like PodSecurityPolicy or a custom admission plugin) which can be targeted at specific users or Namespaces and also protects against creation of overly privileged Pods is recommended instead.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#denyexeconprivileged
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: Deprecated since Kubernetes 1.13 
   FeatureState: 
     State:   Deprecated
     Version: "1.13"
-  Plugin: DenyEscalatingExec
   Description: >
     This admission controller will deny exec and attach commands to pods that run with escalated privileges that allow host access.
     This includes pods that run as privileged, have access to the host IPC namespace, and have access to the host PID namespace.
     The DenyEscalatingExec admission plugin is deprecated and will be removed in v1.18.
     Use of a policy-based admission plugin (like PodSecurityPolicy or a custom admission plugin) which can be targeted at specific users or Namespaces and also protects against creation of overly privileged Pods is recommended instead.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#denyescalatingexec
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: Deprecated since Kubernetes 1.13
   FeatureState: 
     State:   Deprecated
     Version: "1.13"
-  Plugin: EventRateLimit
   Description: >
     This admission controller mitigates the problem where the API server gets flooded by event requests.
     The cluster admin can specify event rate limits by:
     - Ensuring that eventratelimit.admission.k8s.io/v1alpha1=true is included in the --runtime-config flag for the API server;
     - Enabling the EventRateLimit admission controller;
     - Referencing an EventRateLimit configuration file from the file provided to the API server’s command line flag --admission-control-config-file:
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#eventratelimit
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.10
   - Platform: gke
     Enable: False
     Reason: GKE does not support the Event Rate Limit admission controller as it is a Kubernetes Alpha feature.
   FeatureState: 
     State:   Alpha
     Version: "1.13"
-  Plugin: ExtendedResourceToleration
   Description: >
     This plug-in facilitates creation of dedicated nodes with extended resources.
     If operators want to create dedicated nodes with extended resources (like GPUs, FPGAs etc.), they are expected to taint the node with the extended resource name as the key.
     This admission controller, if enabled, automatically adds tolerations for such taints to pods requesting extended resources, so users don’t have to manually add these tolerations.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#extendedresourcetoleration
-  Plugin: ImagePolicyWebhook
   Description: "The ImagePolicyWebhook admission controller allows a backend webhook to make admission decisions."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#imagepolicywebhook
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 5.5.1
   - Platform: gke
     Enable: True
     Reason: >
       CIS benchmark 5.5.1. 
       GKE does not enable the Image Policy Webhook admission controller by default.
       Image Provenance using Binary Authorization is not set by default, as this requires a policy to be set.
-  Plugin: LimitPodHardAntiAffinityTopology
   Description: "This admission controller denies any pod that defines AntiAffinity topology key other than kubernetes.io/hostname in requiredDuringSchedulingRequiredDuringExecution."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#limitpodhardantiaffinitytopology
-  Plugin: LimitRanger
   Description: >
     This admission controller will observe the incoming request and ensure that it does not violate any of the constraints enumerated in the LimitRange object in a Namespace.
     If you are using LimitRange objects in your Kubernetes deployment, you MUST use this admission controller to enforce those constraints.
     LimitRanger can also be used to apply default resource requests to Pods that don’t specify any; currently, the default LimitRanger applies a 0.1 CPU requirement to all Pods in the default namespace.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#limitranger
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: MutatingAdmissionWebhook
   Description: >
     This admission controller calls any mutating webhooks which match the request. Matching webhooks are called in serial; each one may modify the object if it desires. This admission controller (as implied by the name) only runs in the mutating phase. If a webhook called by this has side effects (for example, decrementing quota) it must have a reconciliation system, as it is not guaranteed that subsequent webhooks or validating admission controllers will permit the request to finish. If you disable the MutatingAdmissionWebhook, you must also disable the MutatingWebhookConfiguration object in the admissionregistration.k8s.io/v1beta1 group/version via the --runtime-config flag (both are on by default in versions >= 1.9).
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
   FeatureState: 
     State:   Beta
     Version: "1.13"
-  Plugin: NamespaceAutoProvision
   Description: >
     This admission controller examines all incoming requests on namespaced resources and checks if the referenced namespace does exist. It creates a namespace if it cannot be found. This admission controller is useful in deployments that do not want to restrict creation of a namespace prior to its usage.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#namespaceautoprovision
-  Plugin: NamespaceExists
   Description: >
     This admission controller checks all requests on namespaced resources other than Namespace itself. If the namespace referenced from a request doesn’t exist, the request is rejected.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#namespaceexists
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: Plugin is deprecated. Use NamespaceLifecycle instead.
-  Plugin: NamespaceLifecycle
   Description: >
     This admission controller enforces that a Namespace that is undergoing termination cannot have new objects created in it, and ensures that requests in a non-existent Namespace are rejected. This admission controller also prevents deletion of three system reserved namespaces default, kube-system, kube-public. A Namespace deletion kicks off a sequence of operations that remove all objects (pods, services, etc.) in that namespace. In order to enforce integrity of that process, we strongly recommend running this admission controller.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#namespacelifecycle
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.15
-  Plugin: NodeRestriction
   Description: "This admission controller limits the Node and Pod objects a kubelet can modify."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.17 
-  Plugin: OwnerReferencesPermissionEnforcement
   Description: >
     This admission controller protects the access to the metadata.ownerReferences of an object so that only users with “delete” permission to the object can change it. This admission controller also protects the access to metadata.ownerReferences[x].blockOwnerDeletion of an object, so that only users with “update” permission to the finalizers subresource of the referenced owner can change it.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
-  Plugin: PersistentVolumeLabel
   Description: >
     This admission controller automatically attaches region or zone labels to PersistentVolumes as defined by the cloud provider (for example, GCE or AWS). It helps ensure the Pods and the PersistentVolumes mounted are in the same region and/or zone. If the admission controller doesn’t support automatic labelling your PersistentVolumes, you may need to add the labels manually to prevent pods from mounting volumes from a different zone. PersistentVolumeLabel is DEPRECATED and labeling persistent volumes has been taken over by cloud controller manager. Starting from 1.11, this admission controller is disabled by default.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#persistentvolumelabel
   Recommendation:
   - Platform: vanilla
     Enable: False
     Reason: Deprecated since Kubernetes 1.13
   FeatureState: 
     State:   Deprecated
     Version: "1.13"
-  Plugin: PodNodeSelector
   Description: >
     This admission controller defaults and limits what node selectors may be used within a namespace by reading a namespace annotation and a global configuration.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podnodeselector
-  Plugin: PersistentVolumeClaimResize
   Description: "This admission controller implements additional validations for checking incoming PersistentVolumeClaim resize requests."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#persistentvolumeclaimresize
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: PodPreset
   Description: >
     This admission controller injects a pod with the fields specified in a matching PodPreset. See also PodPreset concept and Inject Information into Pods Using a PodPreset for more information.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podpreset
-  Plugin: PodSecurityPolicy
   Description: >
     This admission controller acts on creation and modification of the pod and determines if it should be admitted based on the requested security context and the available Pod Security Policies.
     For Kubernetes < 1.6.0, the API Server must enable the extensions/v1beta1/podsecuritypolicy API extensions group (--runtime-config=extensions/v1beta1/podsecuritypolicy=true).
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podsecuritypolicy
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.16
   - Platform: gke
     Enable: True
     Reason: >
       CIS benchmark 1.2.16.
       GKE does not enable the Pod Security Policy admission controller by default, as this requires a policy to be set.
       GKE customers can enable PodSecurityPolicy.
-  Plugin: PodTolerationRestriction
   Description: >
     This admission controller first verifies any conflict between a pod’s tolerations and its namespace’s tolerations, and rejects the pod request if there is a conflict. It then merges the namespace’s tolerations into the pod’s tolerations. The resulting tolerations are checked against the namespace’s whitelist of tolerations.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podtolerationrestriction
-  Plugin: Priority
   Description: >
     The priority admission controller uses the priorityClassName field and populates the integer value of the priority. If the priority class is not found, the Pod is rejected.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#priority
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: ResourceQuota
   Description: >
     This admission controller will observe the incoming request and ensure that it does not violate any of the constraints enumerated in the ResourceQuota object in a Namespace. If you are using ResourceQuota objects in your Kubernetes deployment, you MUST use this admission controller to enforce quota constraints.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#resourcequota
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: RuntimeClass
   Description: >
     For RuntimeClass definitions which describe an overhead associated with running a pod, this admission controller will set the pod.Spec.Overhead field accordingly.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#runtimeclass
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
   FeatureState: 
     State:   Alpha
     Version: "1.16"
-  Plugin: SecurityContextDeny
   Description: >
     This admission controller will deny any pod that attempts to set certain escalating SecurityContext fields. This should be enabled if a cluster doesn’t utilize pod security policies to restrict the set of values a security context can take.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#securitycontextdeny
   Recommendation:
   - Platform: vanilla
     Enable: True
     Condition: Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used
     Reason: CIS benchmark 1.2.13
   - Platform: gke
     Enable: False
     Reason: >
       GKE does not enable the Security Context admission controller by default.
       Using a Pod Security Policy allows more control and is preferred.	
-  Plugin: ServiceAccount
   Description: >
     This admission controller implements automation for serviceAccounts. We strongly recommend using this admission controller if you intend to make use of Kubernetes ServiceAccount objects.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#serviceaccount
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: CIS benchmark 1.2.14
-  Plugin: StorageObjectInUseProtection
   Description: >
     The StorageObjectInUseProtection plugin adds the kubernetes.io/pvc-protection or kubernetes.io/pv-protection finalizers to newly created Persistent Volume Claims (PVCs) or Persistent Volumes (PV). In case a user deletes a PVC or PV the PVC or PV is not removed until the finalizer is removed from the PVC or PV by PVC or PV Protection Controller.
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#storageobjectinuseprotection
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
-  Plugin: TaintNodesByCondition
   Description: "This admission controller taints newly created Nodes as NotReady and NoSchedule. That tainting avoids a race condition that could cause Pods to be scheduled on new Nodes before their taints were updated to accurately reflect their reported conditions."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#taintnodesbycondition
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
   FeatureState: 
     State:   Beta
     Version: "1.12"
-  Plugin: ValidatingAdmissionWebhook
   Description: "This admission controller calls any validating webhooks which match the request."
   Documentation: https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook
   Recommended: 
   Recommendation:
   - Platform: vanilla
     Enable: True
     Reason: Recommended by Kubernetes for versions 1.10 and later
   FeatureState:
     State:   Beta
     Version: "1.13"
